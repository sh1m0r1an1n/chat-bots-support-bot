import logging
import os
import time
import traceback

from dotenv import load_dotenv
from telegram.ext import CommandHandler, Filters, MessageHandler, Updater

from dialogflow_utils import DialogflowConnector
from logging_utils import setup_logging


def start(update, _):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    update.message.reply_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫. –ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")
    logging.info(f"[TG –ë–û–¢] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")


def help_command(update, _):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
\nüí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!
    """
    update.message.reply_text(help_text)
    logging.info(f"[TG –ë–û–¢] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.chat.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")


def handle_message(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Dialogflow"""
    user_id = str(update.message.chat.id)
    user_text = update.message.text

    if 'dialogflow' not in context.bot_data:
        context.bot_data['dialogflow'] = DialogflowConnector(
            context.bot_data['dialogflow_project_id']
        )

    try:
        response = context.bot_data['dialogflow'].get_response(user_id, user_text)
        update.message.reply_text(response)
        logging.info(f"[TG –ë–û–¢] –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id}: {user_text}")
    except Exception as e:
        logging.error(f"[TG –ë–û–¢] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    load_dotenv()
    os.environ["BOT_LOG_PREFIX"] = "[DIALOGFLOW][TG –ë–û–¢]"

    try:
        bot_token = os.environ["TG_BOT_TOKEN"]
        chat_id = os.environ["TG_CHAT_ID"]

        setup_logging(bot_token, chat_id)

        updater = Updater(token=bot_token)
        updater.dispatcher.bot_data['dialogflow_project_id'] = os.getenv("DIALOGFLOW_PROJECT_ID")
        dispatcher = updater.dispatcher

        dispatcher.add_handler(CommandHandler("start", start))
        dispatcher.add_handler(CommandHandler("help", help_command))
        dispatcher.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

        logging.info("[TG –ë–û–¢] –ë–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π Dialogflow –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        updater.start_polling()
        updater.idle()

    except KeyError as e:
        logging.critical(f"[TG –ë–û–¢] –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: {e}")
        raise
    except Exception as e:
        logging.critical(f"[TG –ë–û–¢] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    while True:
        try:
            main()
        except Exception as e:
            logging.critical(f"[TG –ë–û–¢] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
            time.sleep(5)